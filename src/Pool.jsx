/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 public/Models/Pool.gltf
*/

import React from "react";
import { useGLTF } from "@react-three/drei";
import * as THREE from "three";
import { useTexture } from "@react-three/drei";
import { useThree, useFrame } from "@react-three/fiber";

const Pool = (props) => {
  const { nodes, materials } = useGLTF("/Models/Pool.gltf");
  const svartvit = materials["Tiles 05"];
  svartvit.doubleSided = true;
  svartvit.map.repeat.set(10, 10);

  let material = new THREE.MeshBasicMaterial({
    color: 0x000000,
    colorWrite: false,
  });
  const Vatten = useTexture({
    normalMap: "/textures/Water/Water_002_NORM.jpg",
    roughnessMap: "/textures/Water/Water_002_ROUGH.jpg",
    aoMap: "/textures/Water/Water_002_OCC.jpg",
    displacementMap: "/textures/Water/Water_002_DISP.png",
  });

  Vatten.normalMap.repeat.set(15, 15);
  Vatten.normalMap.wrapS = Vatten.normalMap.wrapT = THREE.RepeatWrapping;
  Vatten.roughnessMap.repeat.set(15, 15);
  Vatten.roughnessMap.wrapS = Vatten.roughnessMap.wrapT = THREE.RepeatWrapping;
  Vatten.aoMap.repeat.set(15, 15);
  Vatten.aoMap.wrapS = Vatten.aoMap.wrapT = THREE.RepeatWrapping;
  Vatten.displacementMap.repeat.set(15, 15);
  Vatten.displacementMap.wrapS = Vatten.displacementMap.wrapT =
    THREE.RepeatWrapping;
  Vatten.displacementScale = 0.4;
  Vatten.color = new THREE.Color("turquoise");
  Vatten.transparent = true;
  Vatten.opacity = 0.5;

  //animate the normals randomly
  const { clock } = useThree();
  useFrame(() => {
    Vatten.normalMap.offset.x = clock.getElapsedTime() * 0.1;
    Vatten.normalMap.offset.y = clock.getElapsedTime() * 0.2;
    Vatten.roughnessMap.offset.x = clock.getElapsedTime() * 0.1;
    Vatten.roughnessMap.offset.y = clock.getElapsedTime() * 0.1;
    Vatten.displacementMap.offset.x = clock.getElapsedTime() * 0.1;
    Vatten.displacementMap.offset.y = clock.getElapsedTime() * 0.1;
  });


  return (
    <group {...props} dispose={null}>
      <mesh geometry={nodes.Cube.geometry}>
        <meshBasicMaterial {...svartvit} />
      </mesh>
      <mesh geometry={nodes.Cube001.geometry} material={material} />
      <mesh geometry={nodes.Water.geometry} position={[0, -0.2, 0]} rotation={[Math.PI, 0, 0]}>
        <meshStandardMaterial {...Vatten} />
      </mesh>
    </group>
  );
};

export default Pool;

useGLTF.preload("/Models/Pool.gltf");
